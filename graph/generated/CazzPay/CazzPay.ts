// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddedLiquidityToCzpAndOtherTokenPair extends ethereum.Event {
  get params(): AddedLiquidityToCzpAndOtherTokenPair__Params {
    return new AddedLiquidityToCzpAndOtherTokenPair__Params(this);
  }
}

export class AddedLiquidityToCzpAndOtherTokenPair__Params {
  _event: AddedLiquidityToCzpAndOtherTokenPair;

  constructor(event: AddedLiquidityToCzpAndOtherTokenPair) {
    this._event = event;
  }

  get otherTokenContractAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get liquidityProviderAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get czpAmtAdded(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get otherTokenAmtAdded(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get liquidityTokensMinted(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class BoughtWithCrypto extends ethereum.Event {
  get params(): BoughtWithCrypto__Params {
    return new BoughtWithCrypto__Params(this);
  }
}

export class BoughtWithCrypto__Params {
  _event: BoughtWithCrypto;

  constructor(event: BoughtWithCrypto) {
    this._event = event;
  }

  get payerWalletAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipientAccountId(): string {
    return this._event.parameters[1].value.toString();
  }

  get cazzPayTransactionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenUsedForPurchaseContractAddr(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get tokenAmtUsedForPurchased(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fiatAmountPaid(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get fiatAmountToPayToSeller(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class CreatedPairWithCzpAndOtherToken extends ethereum.Event {
  get params(): CreatedPairWithCzpAndOtherToken__Params {
    return new CreatedPairWithCzpAndOtherToken__Params(this);
  }
}

export class CreatedPairWithCzpAndOtherToken__Params {
  _event: CreatedPairWithCzpAndOtherToken;

  constructor(event: CreatedPairWithCzpAndOtherToken) {
    this._event = event;
  }

  get pairAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get otherTokenContractAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PurchaseConfirmed extends ethereum.Event {
  get params(): PurchaseConfirmed__Params {
    return new PurchaseConfirmed__Params(this);
  }
}

export class PurchaseConfirmed__Params {
  _event: PurchaseConfirmed;

  constructor(event: PurchaseConfirmed) {
    this._event = event;
  }

  get cazzPayTransactionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SellerInfo extends ethereum.Event {
  get params(): SellerInfo__Params {
    return new SellerInfo__Params(this);
  }
}

export class SellerInfo__Params {
  _event: SellerInfo;

  constructor(event: SellerInfo) {
    this._event = event;
  }

  get sellerId(): string {
    return this._event.parameters[0].value.toString();
  }

  get email(): string {
    return this._event.parameters[1].value.toString();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class TokensSwapped extends ethereum.Event {
  get params(): TokensSwapped__Params {
    return new TokensSwapped__Params(this);
  }
}

export class TokensSwapped__Params {
  _event: TokensSwapped;

  constructor(event: TokensSwapped) {
    this._event = event;
  }

  get inputTokenContractAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get outputTokenContractAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get inputTokenAmt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get outputTokenAmt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class WithdrawnLiquidityFromCzpAndOtherTokenPair extends ethereum.Event {
  get params(): WithdrawnLiquidityFromCzpAndOtherTokenPair__Params {
    return new WithdrawnLiquidityFromCzpAndOtherTokenPair__Params(this);
  }
}

export class WithdrawnLiquidityFromCzpAndOtherTokenPair__Params {
  _event: WithdrawnLiquidityFromCzpAndOtherTokenPair;

  constructor(event: WithdrawnLiquidityFromCzpAndOtherTokenPair) {
    this._event = event;
  }

  get otherTokenContractAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get liquidityProviderAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get czpAmtWithdrawn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get otherTokenAmtWithdrawn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get liquidityTokensSubmitted(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CazzPay__addLiquidityToCzpAndOtherTokenPairResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class CazzPay__buyWithCryptoTokenResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class CazzPay__swapCzpForOtherTokensResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class CazzPay__swapOtherTokensForCzpResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class CazzPay__withdrawLiquidityForCzpAndEthResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class CazzPay__withdrawLiquidityForCzpAndOtherTokenResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class CazzPay extends ethereum.SmartContract {
  static bind(address: Address): CazzPay {
    return new CazzPay("CazzPay", address);
  }

  addLiquidityToCzpAndOtherTokenPair(
    _otherTokenContractAddr: Address,
    _czpAmtToDeposit: BigInt,
    _otherTokenAmtToDeposit: BigInt,
    _czpMinAmtToDeposit: BigInt,
    _otherTokenMinAmtToDeposit: BigInt,
    _deadline: BigInt
  ): CazzPay__addLiquidityToCzpAndOtherTokenPairResult {
    let result = super.call(
      "addLiquidityToCzpAndOtherTokenPair",
      "addLiquidityToCzpAndOtherTokenPair(address,uint256,uint256,uint256,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_otherTokenContractAddr),
        ethereum.Value.fromUnsignedBigInt(_czpAmtToDeposit),
        ethereum.Value.fromUnsignedBigInt(_otherTokenAmtToDeposit),
        ethereum.Value.fromUnsignedBigInt(_czpMinAmtToDeposit),
        ethereum.Value.fromUnsignedBigInt(_otherTokenMinAmtToDeposit),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );

    return new CazzPay__addLiquidityToCzpAndOtherTokenPairResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_addLiquidityToCzpAndOtherTokenPair(
    _otherTokenContractAddr: Address,
    _czpAmtToDeposit: BigInt,
    _otherTokenAmtToDeposit: BigInt,
    _czpMinAmtToDeposit: BigInt,
    _otherTokenMinAmtToDeposit: BigInt,
    _deadline: BigInt
  ): ethereum.CallResult<CazzPay__addLiquidityToCzpAndOtherTokenPairResult> {
    let result = super.tryCall(
      "addLiquidityToCzpAndOtherTokenPair",
      "addLiquidityToCzpAndOtherTokenPair(address,uint256,uint256,uint256,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_otherTokenContractAddr),
        ethereum.Value.fromUnsignedBigInt(_czpAmtToDeposit),
        ethereum.Value.fromUnsignedBigInt(_otherTokenAmtToDeposit),
        ethereum.Value.fromUnsignedBigInt(_czpMinAmtToDeposit),
        ethereum.Value.fromUnsignedBigInt(_otherTokenMinAmtToDeposit),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CazzPay__addLiquidityToCzpAndOtherTokenPairResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  approvedPriceFeedSigner(): Address {
    let result = super.call(
      "approvedPriceFeedSigner",
      "approvedPriceFeedSigner():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_approvedPriceFeedSigner(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "approvedPriceFeedSigner",
      "approvedPriceFeedSigner():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  buyWithCryptoToken(
    _recipientAccountId: string,
    _otherTokenContractAddr: Address,
    _otherTokenMaxAmtToPayWith: BigInt,
    _fiatAmtToPay: BigInt,
    _deadline: BigInt
  ): CazzPay__buyWithCryptoTokenResult {
    let result = super.call(
      "buyWithCryptoToken",
      "buyWithCryptoToken(string,address,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromString(_recipientAccountId),
        ethereum.Value.fromAddress(_otherTokenContractAddr),
        ethereum.Value.fromUnsignedBigInt(_otherTokenMaxAmtToPayWith),
        ethereum.Value.fromUnsignedBigInt(_fiatAmtToPay),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );

    return new CazzPay__buyWithCryptoTokenResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_buyWithCryptoToken(
    _recipientAccountId: string,
    _otherTokenContractAddr: Address,
    _otherTokenMaxAmtToPayWith: BigInt,
    _fiatAmtToPay: BigInt,
    _deadline: BigInt
  ): ethereum.CallResult<CazzPay__buyWithCryptoTokenResult> {
    let result = super.tryCall(
      "buyWithCryptoToken",
      "buyWithCryptoToken(string,address,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromString(_recipientAccountId),
        ethereum.Value.fromAddress(_otherTokenContractAddr),
        ethereum.Value.fromUnsignedBigInt(_otherTokenMaxAmtToPayWith),
        ethereum.Value.fromUnsignedBigInt(_fiatAmtToPay),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CazzPay__buyWithCryptoTokenResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  createPairWithCzpAndOtherToken(_otherTokenContractAddr: Address): Address {
    let result = super.call(
      "createPairWithCzpAndOtherToken",
      "createPairWithCzpAndOtherToken(address):(address)",
      [ethereum.Value.fromAddress(_otherTokenContractAddr)]
    );

    return result[0].toAddress();
  }

  try_createPairWithCzpAndOtherToken(
    _otherTokenContractAddr: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createPairWithCzpAndOtherToken",
      "createPairWithCzpAndOtherToken(address):(address)",
      [ethereum.Value.fromAddress(_otherTokenContractAddr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  czpContract(): Address {
    let result = super.call("czpContract", "czpContract():(address)", []);

    return result[0].toAddress();
  }

  try_czpContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("czpContract", "czpContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factoryContract(): Address {
    let result = super.call(
      "factoryContract",
      "factoryContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_factoryContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "factoryContract",
      "factoryContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllPairsWithCzpAndOtherToken(): Array<Address> {
    let result = super.call(
      "getAllPairsWithCzpAndOtherToken",
      "getAllPairsWithCzpAndOtherToken():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getAllPairsWithCzpAndOtherToken(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllPairsWithCzpAndOtherToken",
      "getAllPairsWithCzpAndOtherToken():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getCzpAndOtherTokenPairAddr(_otherTokenContractAddr: Address): Address {
    let result = super.call(
      "getCzpAndOtherTokenPairAddr",
      "getCzpAndOtherTokenPairAddr(address):(address)",
      [ethereum.Value.fromAddress(_otherTokenContractAddr)]
    );

    return result[0].toAddress();
  }

  try_getCzpAndOtherTokenPairAddr(
    _otherTokenContractAddr: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCzpAndOtherTokenPairAddr",
      "getCzpAndOtherTokenPairAddr(address):(address)",
      [ethereum.Value.fromAddress(_otherTokenContractAddr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMaxBlockTimestampDelay(): BigInt {
    let result = super.call(
      "getMaxBlockTimestampDelay",
      "getMaxBlockTimestampDelay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMaxBlockTimestampDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxBlockTimestampDelay",
      "getMaxBlockTimestampDelay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaxDataTimestampDelay(): BigInt {
    let result = super.call(
      "getMaxDataTimestampDelay",
      "getMaxDataTimestampDelay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMaxDataTimestampDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxDataTimestampDelay",
      "getMaxDataTimestampDelay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPriceOfTokenInCzpWithTokenAddress(_tokenContractAddr: Address): BigInt {
    let result = super.call(
      "getPriceOfTokenInCzpWithTokenAddress",
      "getPriceOfTokenInCzpWithTokenAddress(address):(uint256)",
      [ethereum.Value.fromAddress(_tokenContractAddr)]
    );

    return result[0].toBigInt();
  }

  try_getPriceOfTokenInCzpWithTokenAddress(
    _tokenContractAddr: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPriceOfTokenInCzpWithTokenAddress",
      "getPriceOfTokenInCzpWithTokenAddress(address):(uint256)",
      [ethereum.Value.fromAddress(_tokenContractAddr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPriceOfTokenInCzpWithTokenSymbol(_tokenSymbol: string): BigInt {
    let result = super.call(
      "getPriceOfTokenInCzpWithTokenSymbol",
      "getPriceOfTokenInCzpWithTokenSymbol(string):(uint256)",
      [ethereum.Value.fromString(_tokenSymbol)]
    );

    return result[0].toBigInt();
  }

  try_getPriceOfTokenInCzpWithTokenSymbol(
    _tokenSymbol: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPriceOfTokenInCzpWithTokenSymbol",
      "getPriceOfTokenInCzpWithTokenSymbol(string):(uint256)",
      [ethereum.Value.fromString(_tokenSymbol)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isOwner(_ownerToVerify: Address): boolean {
    let result = super.call("isOwner", "isOwner(address):(bool)", [
      ethereum.Value.fromAddress(_ownerToVerify)
    ]);

    return result[0].toBoolean();
  }

  try_isOwner(_ownerToVerify: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner(address):(bool)", [
      ethereum.Value.fromAddress(_ownerToVerify)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSignerAuthorized(_receivedSigner: Address): boolean {
    let result = super.call(
      "isSignerAuthorized",
      "isSignerAuthorized(address):(bool)",
      [ethereum.Value.fromAddress(_receivedSigner)]
    );

    return result[0].toBoolean();
  }

  try_isSignerAuthorized(
    _receivedSigner: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isSignerAuthorized",
      "isSignerAuthorized(address):(bool)",
      [ethereum.Value.fromAddress(_receivedSigner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTimestampValid(_receivedTimestamp: BigInt): boolean {
    let result = super.call(
      "isTimestampValid",
      "isTimestampValid(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_receivedTimestamp)]
    );

    return result[0].toBoolean();
  }

  try_isTimestampValid(
    _receivedTimestamp: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTimestampValid",
      "isTimestampValid(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_receivedTimestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  paymentTransferFeesPerc(): i32 {
    let result = super.call(
      "paymentTransferFeesPerc",
      "paymentTransferFeesPerc():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_paymentTransferFeesPerc(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "paymentTransferFeesPerc",
      "paymentTransferFeesPerc():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  routerContract(): Address {
    let result = super.call("routerContract", "routerContract():(address)", []);

    return result[0].toAddress();
  }

  try_routerContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "routerContract",
      "routerContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  swapCzpForOtherTokens(
    _otherTokenContractAddr: Address,
    _czpAmt: BigInt,
    _otherTokenMinAmt: BigInt,
    _deadline: BigInt
  ): CazzPay__swapCzpForOtherTokensResult {
    let result = super.call(
      "swapCzpForOtherTokens",
      "swapCzpForOtherTokens(address,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_otherTokenContractAddr),
        ethereum.Value.fromUnsignedBigInt(_czpAmt),
        ethereum.Value.fromUnsignedBigInt(_otherTokenMinAmt),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );

    return new CazzPay__swapCzpForOtherTokensResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swapCzpForOtherTokens(
    _otherTokenContractAddr: Address,
    _czpAmt: BigInt,
    _otherTokenMinAmt: BigInt,
    _deadline: BigInt
  ): ethereum.CallResult<CazzPay__swapCzpForOtherTokensResult> {
    let result = super.tryCall(
      "swapCzpForOtherTokens",
      "swapCzpForOtherTokens(address,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_otherTokenContractAddr),
        ethereum.Value.fromUnsignedBigInt(_czpAmt),
        ethereum.Value.fromUnsignedBigInt(_otherTokenMinAmt),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CazzPay__swapCzpForOtherTokensResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  swapOtherTokensForCzp(
    _otherTokenContractAddr: Address,
    _otherTokenAmt: BigInt,
    _czpMinAmt: BigInt,
    _deadline: BigInt
  ): CazzPay__swapOtherTokensForCzpResult {
    let result = super.call(
      "swapOtherTokensForCzp",
      "swapOtherTokensForCzp(address,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_otherTokenContractAddr),
        ethereum.Value.fromUnsignedBigInt(_otherTokenAmt),
        ethereum.Value.fromUnsignedBigInt(_czpMinAmt),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );

    return new CazzPay__swapOtherTokensForCzpResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swapOtherTokensForCzp(
    _otherTokenContractAddr: Address,
    _otherTokenAmt: BigInt,
    _czpMinAmt: BigInt,
    _deadline: BigInt
  ): ethereum.CallResult<CazzPay__swapOtherTokensForCzpResult> {
    let result = super.tryCall(
      "swapOtherTokensForCzp",
      "swapOtherTokensForCzp(address,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_otherTokenContractAddr),
        ethereum.Value.fromUnsignedBigInt(_otherTokenAmt),
        ethereum.Value.fromUnsignedBigInt(_czpMinAmt),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CazzPay__swapOtherTokensForCzpResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  wethContract(): Address {
    let result = super.call("wethContract", "wethContract():(address)", []);

    return result[0].toAddress();
  }

  try_wethContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("wethContract", "wethContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrawLiquidityForCzpAndEth(
    _liquidityToWithdraw: BigInt,
    _minCzpToReceive: BigInt,
    _minEthToReceive: BigInt,
    _deadline: BigInt
  ): CazzPay__withdrawLiquidityForCzpAndEthResult {
    let result = super.call(
      "withdrawLiquidityForCzpAndEth",
      "withdrawLiquidityForCzpAndEth(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_liquidityToWithdraw),
        ethereum.Value.fromUnsignedBigInt(_minCzpToReceive),
        ethereum.Value.fromUnsignedBigInt(_minEthToReceive),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );

    return new CazzPay__withdrawLiquidityForCzpAndEthResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_withdrawLiquidityForCzpAndEth(
    _liquidityToWithdraw: BigInt,
    _minCzpToReceive: BigInt,
    _minEthToReceive: BigInt,
    _deadline: BigInt
  ): ethereum.CallResult<CazzPay__withdrawLiquidityForCzpAndEthResult> {
    let result = super.tryCall(
      "withdrawLiquidityForCzpAndEth",
      "withdrawLiquidityForCzpAndEth(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_liquidityToWithdraw),
        ethereum.Value.fromUnsignedBigInt(_minCzpToReceive),
        ethereum.Value.fromUnsignedBigInt(_minEthToReceive),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CazzPay__withdrawLiquidityForCzpAndEthResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  withdrawLiquidityForCzpAndOtherToken(
    _otherTokenContractAddr: Address,
    _liquidityToWithdraw: BigInt,
    _minCzpToReceive: BigInt,
    _minOtherTokenToReceive: BigInt,
    _deadline: BigInt
  ): CazzPay__withdrawLiquidityForCzpAndOtherTokenResult {
    let result = super.call(
      "withdrawLiquidityForCzpAndOtherToken",
      "withdrawLiquidityForCzpAndOtherToken(address,uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_otherTokenContractAddr),
        ethereum.Value.fromUnsignedBigInt(_liquidityToWithdraw),
        ethereum.Value.fromUnsignedBigInt(_minCzpToReceive),
        ethereum.Value.fromUnsignedBigInt(_minOtherTokenToReceive),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );

    return new CazzPay__withdrawLiquidityForCzpAndOtherTokenResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_withdrawLiquidityForCzpAndOtherToken(
    _otherTokenContractAddr: Address,
    _liquidityToWithdraw: BigInt,
    _minCzpToReceive: BigInt,
    _minOtherTokenToReceive: BigInt,
    _deadline: BigInt
  ): ethereum.CallResult<CazzPay__withdrawLiquidityForCzpAndOtherTokenResult> {
    let result = super.tryCall(
      "withdrawLiquidityForCzpAndOtherToken",
      "withdrawLiquidityForCzpAndOtherToken(address,uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_otherTokenContractAddr),
        ethereum.Value.fromUnsignedBigInt(_liquidityToWithdraw),
        ethereum.Value.fromUnsignedBigInt(_minCzpToReceive),
        ethereum.Value.fromUnsignedBigInt(_minOtherTokenToReceive),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CazzPay__withdrawLiquidityForCzpAndOtherTokenResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factoryContractAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _routerContractAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _czpContractAddr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _wethContractAddr(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _paymentTransferFeesPerc(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get _approvedPriceFeedSigner(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddLiquidityToCzpAndEthPairCall extends ethereum.Call {
  get inputs(): AddLiquidityToCzpAndEthPairCall__Inputs {
    return new AddLiquidityToCzpAndEthPairCall__Inputs(this);
  }

  get outputs(): AddLiquidityToCzpAndEthPairCall__Outputs {
    return new AddLiquidityToCzpAndEthPairCall__Outputs(this);
  }
}

export class AddLiquidityToCzpAndEthPairCall__Inputs {
  _call: AddLiquidityToCzpAndEthPairCall;

  constructor(call: AddLiquidityToCzpAndEthPairCall) {
    this._call = call;
  }

  get _czpAmtToDeposit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _czpMinAmtToDeposit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _ethMinAmtToDeposit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AddLiquidityToCzpAndEthPairCall__Outputs {
  _call: AddLiquidityToCzpAndEthPairCall;

  constructor(call: AddLiquidityToCzpAndEthPairCall) {
    this._call = call;
  }

  get czpAmtAdded(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get ethAmtAdded(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get liquidityTokensMinted(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class AddLiquidityToCzpAndOtherTokenPairCall extends ethereum.Call {
  get inputs(): AddLiquidityToCzpAndOtherTokenPairCall__Inputs {
    return new AddLiquidityToCzpAndOtherTokenPairCall__Inputs(this);
  }

  get outputs(): AddLiquidityToCzpAndOtherTokenPairCall__Outputs {
    return new AddLiquidityToCzpAndOtherTokenPairCall__Outputs(this);
  }
}

export class AddLiquidityToCzpAndOtherTokenPairCall__Inputs {
  _call: AddLiquidityToCzpAndOtherTokenPairCall;

  constructor(call: AddLiquidityToCzpAndOtherTokenPairCall) {
    this._call = call;
  }

  get _otherTokenContractAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _czpAmtToDeposit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _otherTokenAmtToDeposit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _czpMinAmtToDeposit(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _otherTokenMinAmtToDeposit(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class AddLiquidityToCzpAndOtherTokenPairCall__Outputs {
  _call: AddLiquidityToCzpAndOtherTokenPairCall;

  constructor(call: AddLiquidityToCzpAndOtherTokenPairCall) {
    this._call = call;
  }

  get czpAmtAdded(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get otherTokenAmtAdded(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get liquidityTokensMinted(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class AddOwnerCall extends ethereum.Call {
  get inputs(): AddOwnerCall__Inputs {
    return new AddOwnerCall__Inputs(this);
  }

  get outputs(): AddOwnerCall__Outputs {
    return new AddOwnerCall__Outputs(this);
  }
}

export class AddOwnerCall__Inputs {
  _call: AddOwnerCall;

  constructor(call: AddOwnerCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddOwnerCall__Outputs {
  _call: AddOwnerCall;

  constructor(call: AddOwnerCall) {
    this._call = call;
  }
}

export class BuyWithCryptoTokenCall extends ethereum.Call {
  get inputs(): BuyWithCryptoTokenCall__Inputs {
    return new BuyWithCryptoTokenCall__Inputs(this);
  }

  get outputs(): BuyWithCryptoTokenCall__Outputs {
    return new BuyWithCryptoTokenCall__Outputs(this);
  }
}

export class BuyWithCryptoTokenCall__Inputs {
  _call: BuyWithCryptoTokenCall;

  constructor(call: BuyWithCryptoTokenCall) {
    this._call = call;
  }

  get _recipientAccountId(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _otherTokenContractAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _otherTokenMaxAmtToPayWith(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _fiatAmtToPay(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class BuyWithCryptoTokenCall__Outputs {
  _call: BuyWithCryptoTokenCall;

  constructor(call: BuyWithCryptoTokenCall) {
    this._call = call;
  }

  get otherTokenAmtUsed(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fiatAmountPaid(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class BuyWithEthCall extends ethereum.Call {
  get inputs(): BuyWithEthCall__Inputs {
    return new BuyWithEthCall__Inputs(this);
  }

  get outputs(): BuyWithEthCall__Outputs {
    return new BuyWithEthCall__Outputs(this);
  }
}

export class BuyWithEthCall__Inputs {
  _call: BuyWithEthCall;

  constructor(call: BuyWithEthCall) {
    this._call = call;
  }

  get _recipientAccountId(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _fiatAmtToPay(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyWithEthCall__Outputs {
  _call: BuyWithEthCall;

  constructor(call: BuyWithEthCall) {
    this._call = call;
  }

  get ethAmtUsed(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fiatAmountPaid(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CreatePairWithCzpAndEthCall extends ethereum.Call {
  get inputs(): CreatePairWithCzpAndEthCall__Inputs {
    return new CreatePairWithCzpAndEthCall__Inputs(this);
  }

  get outputs(): CreatePairWithCzpAndEthCall__Outputs {
    return new CreatePairWithCzpAndEthCall__Outputs(this);
  }
}

export class CreatePairWithCzpAndEthCall__Inputs {
  _call: CreatePairWithCzpAndEthCall;

  constructor(call: CreatePairWithCzpAndEthCall) {
    this._call = call;
  }
}

export class CreatePairWithCzpAndEthCall__Outputs {
  _call: CreatePairWithCzpAndEthCall;

  constructor(call: CreatePairWithCzpAndEthCall) {
    this._call = call;
  }

  get pairAddr(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreatePairWithCzpAndOtherTokenCall extends ethereum.Call {
  get inputs(): CreatePairWithCzpAndOtherTokenCall__Inputs {
    return new CreatePairWithCzpAndOtherTokenCall__Inputs(this);
  }

  get outputs(): CreatePairWithCzpAndOtherTokenCall__Outputs {
    return new CreatePairWithCzpAndOtherTokenCall__Outputs(this);
  }
}

export class CreatePairWithCzpAndOtherTokenCall__Inputs {
  _call: CreatePairWithCzpAndOtherTokenCall;

  constructor(call: CreatePairWithCzpAndOtherTokenCall) {
    this._call = call;
  }

  get _otherTokenContractAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CreatePairWithCzpAndOtherTokenCall__Outputs {
  _call: CreatePairWithCzpAndOtherTokenCall;

  constructor(call: CreatePairWithCzpAndOtherTokenCall) {
    this._call = call;
  }

  get pairAddr(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RemoveOwnerCall extends ethereum.Call {
  get inputs(): RemoveOwnerCall__Inputs {
    return new RemoveOwnerCall__Inputs(this);
  }

  get outputs(): RemoveOwnerCall__Outputs {
    return new RemoveOwnerCall__Outputs(this);
  }
}

export class RemoveOwnerCall__Inputs {
  _call: RemoveOwnerCall;

  constructor(call: RemoveOwnerCall) {
    this._call = call;
  }

  get _ownerToRemove(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveOwnerCall__Outputs {
  _call: RemoveOwnerCall;

  constructor(call: RemoveOwnerCall) {
    this._call = call;
  }
}

export class SetApprovedPriceFeedSignerCall extends ethereum.Call {
  get inputs(): SetApprovedPriceFeedSignerCall__Inputs {
    return new SetApprovedPriceFeedSignerCall__Inputs(this);
  }

  get outputs(): SetApprovedPriceFeedSignerCall__Outputs {
    return new SetApprovedPriceFeedSignerCall__Outputs(this);
  }
}

export class SetApprovedPriceFeedSignerCall__Inputs {
  _call: SetApprovedPriceFeedSignerCall;

  constructor(call: SetApprovedPriceFeedSignerCall) {
    this._call = call;
  }

  get _newApprovedPriceFeedSigner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetApprovedPriceFeedSignerCall__Outputs {
  _call: SetApprovedPriceFeedSignerCall;

  constructor(call: SetApprovedPriceFeedSignerCall) {
    this._call = call;
  }
}

export class SetPaymentTransferFeesPercCall extends ethereum.Call {
  get inputs(): SetPaymentTransferFeesPercCall__Inputs {
    return new SetPaymentTransferFeesPercCall__Inputs(this);
  }

  get outputs(): SetPaymentTransferFeesPercCall__Outputs {
    return new SetPaymentTransferFeesPercCall__Outputs(this);
  }
}

export class SetPaymentTransferFeesPercCall__Inputs {
  _call: SetPaymentTransferFeesPercCall;

  constructor(call: SetPaymentTransferFeesPercCall) {
    this._call = call;
  }

  get _newPaymentTransferFeesPerc(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetPaymentTransferFeesPercCall__Outputs {
  _call: SetPaymentTransferFeesPercCall;

  constructor(call: SetPaymentTransferFeesPercCall) {
    this._call = call;
  }
}

export class SetPurchaseConfirmationCall extends ethereum.Call {
  get inputs(): SetPurchaseConfirmationCall__Inputs {
    return new SetPurchaseConfirmationCall__Inputs(this);
  }

  get outputs(): SetPurchaseConfirmationCall__Outputs {
    return new SetPurchaseConfirmationCall__Outputs(this);
  }
}

export class SetPurchaseConfirmationCall__Inputs {
  _call: SetPurchaseConfirmationCall;

  constructor(call: SetPurchaseConfirmationCall) {
    this._call = call;
  }

  get _cazzPayTransactionIdToConfirm(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPurchaseConfirmationCall__Outputs {
  _call: SetPurchaseConfirmationCall;

  constructor(call: SetPurchaseConfirmationCall) {
    this._call = call;
  }
}

export class StoreSellerInfoCall extends ethereum.Call {
  get inputs(): StoreSellerInfoCall__Inputs {
    return new StoreSellerInfoCall__Inputs(this);
  }

  get outputs(): StoreSellerInfoCall__Outputs {
    return new StoreSellerInfoCall__Outputs(this);
  }
}

export class StoreSellerInfoCall__Inputs {
  _call: StoreSellerInfoCall;

  constructor(call: StoreSellerInfoCall) {
    this._call = call;
  }

  get _sellerId(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _email(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _name(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class StoreSellerInfoCall__Outputs {
  _call: StoreSellerInfoCall;

  constructor(call: StoreSellerInfoCall) {
    this._call = call;
  }
}

export class SwapCzpForOtherTokensCall extends ethereum.Call {
  get inputs(): SwapCzpForOtherTokensCall__Inputs {
    return new SwapCzpForOtherTokensCall__Inputs(this);
  }

  get outputs(): SwapCzpForOtherTokensCall__Outputs {
    return new SwapCzpForOtherTokensCall__Outputs(this);
  }
}

export class SwapCzpForOtherTokensCall__Inputs {
  _call: SwapCzpForOtherTokensCall;

  constructor(call: SwapCzpForOtherTokensCall) {
    this._call = call;
  }

  get _otherTokenContractAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _czpAmt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _otherTokenMinAmt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapCzpForOtherTokensCall__Outputs {
  _call: SwapCzpForOtherTokensCall;

  constructor(call: SwapCzpForOtherTokensCall) {
    this._call = call;
  }

  get czpAmtUsed(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get otherTokenAmtReceived(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapOtherTokensForCzpCall extends ethereum.Call {
  get inputs(): SwapOtherTokensForCzpCall__Inputs {
    return new SwapOtherTokensForCzpCall__Inputs(this);
  }

  get outputs(): SwapOtherTokensForCzpCall__Outputs {
    return new SwapOtherTokensForCzpCall__Outputs(this);
  }
}

export class SwapOtherTokensForCzpCall__Inputs {
  _call: SwapOtherTokensForCzpCall;

  constructor(call: SwapOtherTokensForCzpCall) {
    this._call = call;
  }

  get _otherTokenContractAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _otherTokenAmt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _czpMinAmt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapOtherTokensForCzpCall__Outputs {
  _call: SwapOtherTokensForCzpCall;

  constructor(call: SwapOtherTokensForCzpCall) {
    this._call = call;
  }

  get otherTokenAmtUsed(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get czpAmtReceived(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _withdrawToAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawLiquidityForCzpAndEthCall extends ethereum.Call {
  get inputs(): WithdrawLiquidityForCzpAndEthCall__Inputs {
    return new WithdrawLiquidityForCzpAndEthCall__Inputs(this);
  }

  get outputs(): WithdrawLiquidityForCzpAndEthCall__Outputs {
    return new WithdrawLiquidityForCzpAndEthCall__Outputs(this);
  }
}

export class WithdrawLiquidityForCzpAndEthCall__Inputs {
  _call: WithdrawLiquidityForCzpAndEthCall;

  constructor(call: WithdrawLiquidityForCzpAndEthCall) {
    this._call = call;
  }

  get _liquidityToWithdraw(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minCzpToReceive(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minEthToReceive(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class WithdrawLiquidityForCzpAndEthCall__Outputs {
  _call: WithdrawLiquidityForCzpAndEthCall;

  constructor(call: WithdrawLiquidityForCzpAndEthCall) {
    this._call = call;
  }

  get czpReceived(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get ethReceived(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class WithdrawLiquidityForCzpAndOtherTokenCall extends ethereum.Call {
  get inputs(): WithdrawLiquidityForCzpAndOtherTokenCall__Inputs {
    return new WithdrawLiquidityForCzpAndOtherTokenCall__Inputs(this);
  }

  get outputs(): WithdrawLiquidityForCzpAndOtherTokenCall__Outputs {
    return new WithdrawLiquidityForCzpAndOtherTokenCall__Outputs(this);
  }
}

export class WithdrawLiquidityForCzpAndOtherTokenCall__Inputs {
  _call: WithdrawLiquidityForCzpAndOtherTokenCall;

  constructor(call: WithdrawLiquidityForCzpAndOtherTokenCall) {
    this._call = call;
  }

  get _otherTokenContractAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _liquidityToWithdraw(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minCzpToReceive(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minOtherTokenToReceive(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class WithdrawLiquidityForCzpAndOtherTokenCall__Outputs {
  _call: WithdrawLiquidityForCzpAndOtherTokenCall;

  constructor(call: WithdrawLiquidityForCzpAndOtherTokenCall) {
    this._call = call;
  }

  get czpReceived(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get otherTokenReceived(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}
