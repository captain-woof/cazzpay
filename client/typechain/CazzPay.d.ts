/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CazzPayInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidityToCzpAndEthPair(uint256,uint256,uint256,uint256)": FunctionFragment;
    "addLiquidityToCzpAndOtherTokenPair(address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "addOwner(address)": FunctionFragment;
    "approvedPriceFeedSigner()": FunctionFragment;
    "buyWithCryptoToken(string,address,uint256,uint256,uint256)": FunctionFragment;
    "buyWithEth(string,uint256,uint256)": FunctionFragment;
    "createPairWithCzpAndEth()": FunctionFragment;
    "createPairWithCzpAndOtherToken(address)": FunctionFragment;
    "czpContract()": FunctionFragment;
    "factoryContract()": FunctionFragment;
    "getAllPairsWithCzpAndOtherToken()": FunctionFragment;
    "getCzpAndOtherTokenPairAddr(address)": FunctionFragment;
    "getMaxBlockTimestampDelay()": FunctionFragment;
    "getMaxDataTimestampDelay()": FunctionFragment;
    "getPriceOfTokenInCzpWithTokenAddress(address)": FunctionFragment;
    "getPriceOfTokenInCzpWithTokenSymbol(string)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "isSignerAuthorized(address)": FunctionFragment;
    "isTimestampValid(uint256)": FunctionFragment;
    "paymentTransferFeesPerc()": FunctionFragment;
    "removeOwner(address)": FunctionFragment;
    "routerContract()": FunctionFragment;
    "setApprovedPriceFeedSigner(address)": FunctionFragment;
    "setPaymentTransferFeesPerc(uint16)": FunctionFragment;
    "setPurchaseConfirmation(uint256)": FunctionFragment;
    "storeSellerInfo(string,string,string)": FunctionFragment;
    "swapCzpForOtherTokens(address,uint256,uint256,uint256)": FunctionFragment;
    "swapOtherTokensForCzp(address,uint256,uint256,uint256)": FunctionFragment;
    "wethContract()": FunctionFragment;
    "withdraw(address)": FunctionFragment;
    "withdrawLiquidityForCzpAndEth(uint256,uint256,uint256,uint256)": FunctionFragment;
    "withdrawLiquidityForCzpAndOtherToken(address,uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidityToCzpAndEthPair",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityToCzpAndOtherTokenPair",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "addOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "approvedPriceFeedSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithCryptoToken",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithEth",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPairWithCzpAndEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPairWithCzpAndOtherToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "czpContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "factoryContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPairsWithCzpAndOtherToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCzpAndOtherTokenPairAddr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxBlockTimestampDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxDataTimestampDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOfTokenInCzpWithTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOfTokenInCzpWithTokenSymbol",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isSignerAuthorized",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTimestampValid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentTransferFeesPerc",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "removeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "routerContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovedPriceFeedSigner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentTransferFeesPerc",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPurchaseConfirmation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storeSellerInfo",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapCzpForOtherTokens",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOtherTokensForCzp",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wethContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidityForCzpAndEth",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidityForCzpAndOtherToken",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidityToCzpAndEthPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityToCzpAndOtherTokenPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approvedPriceFeedSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyWithCryptoToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyWithEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPairWithCzpAndEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPairWithCzpAndOtherToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "czpContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factoryContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPairsWithCzpAndOtherToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCzpAndOtherTokenPairAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxBlockTimestampDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxDataTimestampDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOfTokenInCzpWithTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOfTokenInCzpWithTokenSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSignerAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTimestampValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentTransferFeesPerc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovedPriceFeedSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentTransferFeesPerc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPurchaseConfirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeSellerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapCzpForOtherTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapOtherTokensForCzp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wethContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidityForCzpAndEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidityForCzpAndOtherToken",
    data: BytesLike
  ): Result;

  events: {
    "AddedLiquidityToCzpAndOtherTokenPair(address,address,uint256,uint256,uint256)": EventFragment;
    "BoughtWithCrypto(address,string,uint256,address,uint256,uint256,uint256)": EventFragment;
    "CreatedPairWithCzpAndOtherToken(address,address)": EventFragment;
    "PurchaseConfirmed(uint256)": EventFragment;
    "SellerInfo(string,string,string)": EventFragment;
    "TokensSwapped(address,address,uint256,uint256)": EventFragment;
    "WithdrawnLiquidityFromCzpAndOtherTokenPair(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AddedLiquidityToCzpAndOtherTokenPair"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoughtWithCrypto"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CreatedPairWithCzpAndOtherToken"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensSwapped"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawnLiquidityFromCzpAndOtherTokenPair"
  ): EventFragment;
}

export type AddedLiquidityToCzpAndOtherTokenPairEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    otherTokenContractAddr: string;
    liquidityProviderAddr: string;
    czpAmtAdded: BigNumber;
    otherTokenAmtAdded: BigNumber;
    liquidityTokensMinted: BigNumber;
  }
>;

export type BoughtWithCryptoEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber, BigNumber] & {
    payerWalletAddr: string;
    recipientAccountId: string;
    cazzPayTransactionId: BigNumber;
    tokenUsedForPurchaseContractAddr: string;
    tokenAmtUsedForPurchased: BigNumber;
    fiatAmountPaid: BigNumber;
    fiatAmountToPayToSeller: BigNumber;
  }
>;

export type CreatedPairWithCzpAndOtherTokenEvent = TypedEvent<
  [string, string] & { pairAddr: string; otherTokenContractAddr: string }
>;

export type PurchaseConfirmedEvent = TypedEvent<
  [BigNumber] & { cazzPayTransactionId: BigNumber }
>;

export type SellerInfoEvent = TypedEvent<
  [string, string, string] & { sellerId: string; email: string; name: string }
>;

export type TokensSwappedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    inputTokenContractAddr: string;
    outputTokenContractAddr: string;
    inputTokenAmt: BigNumber;
    outputTokenAmt: BigNumber;
  }
>;

export type WithdrawnLiquidityFromCzpAndOtherTokenPairEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    otherTokenContractAddr: string;
    liquidityProviderAddr: string;
    czpAmtWithdrawn: BigNumber;
    otherTokenAmtWithdrawn: BigNumber;
    liquidityTokensSubmitted: BigNumber;
  }
>;

export class CazzPay extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CazzPayInterface;

  functions: {
    addLiquidityToCzpAndEthPair(
      _czpAmtToDeposit: BigNumberish,
      _czpMinAmtToDeposit: BigNumberish,
      _ethMinAmtToDeposit: BigNumberish,
      _deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidityToCzpAndOtherTokenPair(
      _otherTokenContractAddr: string,
      _czpAmtToDeposit: BigNumberish,
      _otherTokenAmtToDeposit: BigNumberish,
      _czpMinAmtToDeposit: BigNumberish,
      _otherTokenMinAmtToDeposit: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvedPriceFeedSigner(overrides?: CallOverrides): Promise<[string]>;

    buyWithCryptoToken(
      _recipientAccountId: string,
      _otherTokenContractAddr: string,
      _otherTokenMaxAmtToPayWith: BigNumberish,
      _fiatAmtToPay: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyWithEth(
      _recipientAccountId: string,
      _fiatAmtToPay: BigNumberish,
      _deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPairWithCzpAndEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPairWithCzpAndOtherToken(
      _otherTokenContractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    czpContract(overrides?: CallOverrides): Promise<[string]>;

    factoryContract(overrides?: CallOverrides): Promise<[string]>;

    getAllPairsWithCzpAndOtherToken(
      overrides?: CallOverrides
    ): Promise<[string[]] & { pairAddrsWithCzpAndOtherToken: string[] }>;

    getCzpAndOtherTokenPairAddr(
      _otherTokenContractAddr: string,
      overrides?: CallOverrides
    ): Promise<[string] & { poolAddr: string }>;

    getMaxBlockTimestampDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxDataTimestampDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPriceOfTokenInCzpWithTokenAddress(
      _tokenContractAddr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceOfTokenInCzpWithTokenSymbol(
      _tokenSymbol: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isOwner(
      _ownerToVerify: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSignerAuthorized(
      _receivedSigner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTimestampValid(
      _receivedTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    paymentTransferFeesPerc(overrides?: CallOverrides): Promise<[number]>;

    removeOwner(
      _ownerToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    routerContract(overrides?: CallOverrides): Promise<[string]>;

    setApprovedPriceFeedSigner(
      _newApprovedPriceFeedSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaymentTransferFeesPerc(
      _newPaymentTransferFeesPerc: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPurchaseConfirmation(
      _cazzPayTransactionIdToConfirm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    storeSellerInfo(
      _sellerId: string,
      _email: string,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapCzpForOtherTokens(
      _otherTokenContractAddr: string,
      _czpAmt: BigNumberish,
      _otherTokenMinAmt: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapOtherTokensForCzp(
      _otherTokenContractAddr: string,
      _otherTokenAmt: BigNumberish,
      _czpMinAmt: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wethContract(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _withdrawToAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLiquidityForCzpAndEth(
      _liquidityToWithdraw: BigNumberish,
      _minCzpToReceive: BigNumberish,
      _minEthToReceive: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLiquidityForCzpAndOtherToken(
      _otherTokenContractAddr: string,
      _liquidityToWithdraw: BigNumberish,
      _minCzpToReceive: BigNumberish,
      _minOtherTokenToReceive: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidityToCzpAndEthPair(
    _czpAmtToDeposit: BigNumberish,
    _czpMinAmtToDeposit: BigNumberish,
    _ethMinAmtToDeposit: BigNumberish,
    _deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidityToCzpAndOtherTokenPair(
    _otherTokenContractAddr: string,
    _czpAmtToDeposit: BigNumberish,
    _otherTokenAmtToDeposit: BigNumberish,
    _czpMinAmtToDeposit: BigNumberish,
    _otherTokenMinAmtToDeposit: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addOwner(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvedPriceFeedSigner(overrides?: CallOverrides): Promise<string>;

  buyWithCryptoToken(
    _recipientAccountId: string,
    _otherTokenContractAddr: string,
    _otherTokenMaxAmtToPayWith: BigNumberish,
    _fiatAmtToPay: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyWithEth(
    _recipientAccountId: string,
    _fiatAmtToPay: BigNumberish,
    _deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPairWithCzpAndEth(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPairWithCzpAndOtherToken(
    _otherTokenContractAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  czpContract(overrides?: CallOverrides): Promise<string>;

  factoryContract(overrides?: CallOverrides): Promise<string>;

  getAllPairsWithCzpAndOtherToken(overrides?: CallOverrides): Promise<string[]>;

  getCzpAndOtherTokenPairAddr(
    _otherTokenContractAddr: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getMaxBlockTimestampDelay(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxDataTimestampDelay(overrides?: CallOverrides): Promise<BigNumber>;

  getPriceOfTokenInCzpWithTokenAddress(
    _tokenContractAddr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceOfTokenInCzpWithTokenSymbol(
    _tokenSymbol: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isOwner(_ownerToVerify: string, overrides?: CallOverrides): Promise<boolean>;

  isSignerAuthorized(
    _receivedSigner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTimestampValid(
    _receivedTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  paymentTransferFeesPerc(overrides?: CallOverrides): Promise<number>;

  removeOwner(
    _ownerToRemove: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  routerContract(overrides?: CallOverrides): Promise<string>;

  setApprovedPriceFeedSigner(
    _newApprovedPriceFeedSigner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaymentTransferFeesPerc(
    _newPaymentTransferFeesPerc: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPurchaseConfirmation(
    _cazzPayTransactionIdToConfirm: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  storeSellerInfo(
    _sellerId: string,
    _email: string,
    _name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapCzpForOtherTokens(
    _otherTokenContractAddr: string,
    _czpAmt: BigNumberish,
    _otherTokenMinAmt: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapOtherTokensForCzp(
    _otherTokenContractAddr: string,
    _otherTokenAmt: BigNumberish,
    _czpMinAmt: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wethContract(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _withdrawToAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLiquidityForCzpAndEth(
    _liquidityToWithdraw: BigNumberish,
    _minCzpToReceive: BigNumberish,
    _minEthToReceive: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLiquidityForCzpAndOtherToken(
    _otherTokenContractAddr: string,
    _liquidityToWithdraw: BigNumberish,
    _minCzpToReceive: BigNumberish,
    _minOtherTokenToReceive: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidityToCzpAndEthPair(
      _czpAmtToDeposit: BigNumberish,
      _czpMinAmtToDeposit: BigNumberish,
      _ethMinAmtToDeposit: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        czpAmtAdded: BigNumber;
        ethAmtAdded: BigNumber;
        liquidityTokensMinted: BigNumber;
      }
    >;

    addLiquidityToCzpAndOtherTokenPair(
      _otherTokenContractAddr: string,
      _czpAmtToDeposit: BigNumberish,
      _otherTokenAmtToDeposit: BigNumberish,
      _czpMinAmtToDeposit: BigNumberish,
      _otherTokenMinAmtToDeposit: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        czpAmtAdded: BigNumber;
        otherTokenAmtAdded: BigNumber;
        liquidityTokensMinted: BigNumber;
      }
    >;

    addOwner(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    approvedPriceFeedSigner(overrides?: CallOverrides): Promise<string>;

    buyWithCryptoToken(
      _recipientAccountId: string,
      _otherTokenContractAddr: string,
      _otherTokenMaxAmtToPayWith: BigNumberish,
      _fiatAmtToPay: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        otherTokenAmtUsed: BigNumber;
        fiatAmountPaid: BigNumber;
      }
    >;

    buyWithEth(
      _recipientAccountId: string,
      _fiatAmtToPay: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        ethAmtUsed: BigNumber;
        fiatAmountPaid: BigNumber;
      }
    >;

    createPairWithCzpAndEth(overrides?: CallOverrides): Promise<string>;

    createPairWithCzpAndOtherToken(
      _otherTokenContractAddr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    czpContract(overrides?: CallOverrides): Promise<string>;

    factoryContract(overrides?: CallOverrides): Promise<string>;

    getAllPairsWithCzpAndOtherToken(
      overrides?: CallOverrides
    ): Promise<string[]>;

    getCzpAndOtherTokenPairAddr(
      _otherTokenContractAddr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getMaxBlockTimestampDelay(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxDataTimestampDelay(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOfTokenInCzpWithTokenAddress(
      _tokenContractAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceOfTokenInCzpWithTokenSymbol(
      _tokenSymbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(
      _ownerToVerify: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSignerAuthorized(
      _receivedSigner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTimestampValid(
      _receivedTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    paymentTransferFeesPerc(overrides?: CallOverrides): Promise<number>;

    removeOwner(
      _ownerToRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    routerContract(overrides?: CallOverrides): Promise<string>;

    setApprovedPriceFeedSigner(
      _newApprovedPriceFeedSigner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentTransferFeesPerc(
      _newPaymentTransferFeesPerc: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPurchaseConfirmation(
      _cazzPayTransactionIdToConfirm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    storeSellerInfo(
      _sellerId: string,
      _email: string,
      _name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapCzpForOtherTokens(
      _otherTokenContractAddr: string,
      _czpAmt: BigNumberish,
      _otherTokenMinAmt: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        czpAmtUsed: BigNumber;
        otherTokenAmtReceived: BigNumber;
      }
    >;

    swapOtherTokensForCzp(
      _otherTokenContractAddr: string,
      _otherTokenAmt: BigNumberish,
      _czpMinAmt: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        otherTokenAmtUsed: BigNumber;
        czpAmtReceived: BigNumber;
      }
    >;

    wethContract(overrides?: CallOverrides): Promise<string>;

    withdraw(_withdrawToAddr: string, overrides?: CallOverrides): Promise<void>;

    withdrawLiquidityForCzpAndEth(
      _liquidityToWithdraw: BigNumberish,
      _minCzpToReceive: BigNumberish,
      _minEthToReceive: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        czpReceived: BigNumber;
        ethReceived: BigNumber;
      }
    >;

    withdrawLiquidityForCzpAndOtherToken(
      _otherTokenContractAddr: string,
      _liquidityToWithdraw: BigNumberish,
      _minCzpToReceive: BigNumberish,
      _minOtherTokenToReceive: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        czpReceived: BigNumber;
        otherTokenReceived: BigNumber;
      }
    >;
  };

  filters: {
    "AddedLiquidityToCzpAndOtherTokenPair(address,address,uint256,uint256,uint256)"(
      otherTokenContractAddr?: string | null,
      liquidityProviderAddr?: string | null,
      czpAmtAdded?: null,
      otherTokenAmtAdded?: null,
      liquidityTokensMinted?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        otherTokenContractAddr: string;
        liquidityProviderAddr: string;
        czpAmtAdded: BigNumber;
        otherTokenAmtAdded: BigNumber;
        liquidityTokensMinted: BigNumber;
      }
    >;

    AddedLiquidityToCzpAndOtherTokenPair(
      otherTokenContractAddr?: string | null,
      liquidityProviderAddr?: string | null,
      czpAmtAdded?: null,
      otherTokenAmtAdded?: null,
      liquidityTokensMinted?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        otherTokenContractAddr: string;
        liquidityProviderAddr: string;
        czpAmtAdded: BigNumber;
        otherTokenAmtAdded: BigNumber;
        liquidityTokensMinted: BigNumber;
      }
    >;

    "BoughtWithCrypto(address,string,uint256,address,uint256,uint256,uint256)"(
      payerWalletAddr?: string | null,
      recipientAccountId?: null,
      cazzPayTransactionId?: BigNumberish | null,
      tokenUsedForPurchaseContractAddr?: null,
      tokenAmtUsedForPurchased?: null,
      fiatAmountPaid?: null,
      fiatAmountToPayToSeller?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber, BigNumber, BigNumber],
      {
        payerWalletAddr: string;
        recipientAccountId: string;
        cazzPayTransactionId: BigNumber;
        tokenUsedForPurchaseContractAddr: string;
        tokenAmtUsedForPurchased: BigNumber;
        fiatAmountPaid: BigNumber;
        fiatAmountToPayToSeller: BigNumber;
      }
    >;

    BoughtWithCrypto(
      payerWalletAddr?: string | null,
      recipientAccountId?: null,
      cazzPayTransactionId?: BigNumberish | null,
      tokenUsedForPurchaseContractAddr?: null,
      tokenAmtUsedForPurchased?: null,
      fiatAmountPaid?: null,
      fiatAmountToPayToSeller?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber, BigNumber, BigNumber],
      {
        payerWalletAddr: string;
        recipientAccountId: string;
        cazzPayTransactionId: BigNumber;
        tokenUsedForPurchaseContractAddr: string;
        tokenAmtUsedForPurchased: BigNumber;
        fiatAmountPaid: BigNumber;
        fiatAmountToPayToSeller: BigNumber;
      }
    >;

    "CreatedPairWithCzpAndOtherToken(address,address)"(
      pairAddr?: string | null,
      otherTokenContractAddr?: string | null
    ): TypedEventFilter<
      [string, string],
      { pairAddr: string; otherTokenContractAddr: string }
    >;

    CreatedPairWithCzpAndOtherToken(
      pairAddr?: string | null,
      otherTokenContractAddr?: string | null
    ): TypedEventFilter<
      [string, string],
      { pairAddr: string; otherTokenContractAddr: string }
    >;

    "PurchaseConfirmed(uint256)"(
      cazzPayTransactionId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { cazzPayTransactionId: BigNumber }>;

    PurchaseConfirmed(
      cazzPayTransactionId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { cazzPayTransactionId: BigNumber }>;

    "SellerInfo(string,string,string)"(
      sellerId?: null,
      email?: null,
      name?: null
    ): TypedEventFilter<
      [string, string, string],
      { sellerId: string; email: string; name: string }
    >;

    SellerInfo(
      sellerId?: null,
      email?: null,
      name?: null
    ): TypedEventFilter<
      [string, string, string],
      { sellerId: string; email: string; name: string }
    >;

    "TokensSwapped(address,address,uint256,uint256)"(
      inputTokenContractAddr?: string | null,
      outputTokenContractAddr?: string | null,
      inputTokenAmt?: null,
      outputTokenAmt?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        inputTokenContractAddr: string;
        outputTokenContractAddr: string;
        inputTokenAmt: BigNumber;
        outputTokenAmt: BigNumber;
      }
    >;

    TokensSwapped(
      inputTokenContractAddr?: string | null,
      outputTokenContractAddr?: string | null,
      inputTokenAmt?: null,
      outputTokenAmt?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        inputTokenContractAddr: string;
        outputTokenContractAddr: string;
        inputTokenAmt: BigNumber;
        outputTokenAmt: BigNumber;
      }
    >;

    "WithdrawnLiquidityFromCzpAndOtherTokenPair(address,address,uint256,uint256,uint256)"(
      otherTokenContractAddr?: string | null,
      liquidityProviderAddr?: string | null,
      czpAmtWithdrawn?: null,
      otherTokenAmtWithdrawn?: null,
      liquidityTokensSubmitted?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        otherTokenContractAddr: string;
        liquidityProviderAddr: string;
        czpAmtWithdrawn: BigNumber;
        otherTokenAmtWithdrawn: BigNumber;
        liquidityTokensSubmitted: BigNumber;
      }
    >;

    WithdrawnLiquidityFromCzpAndOtherTokenPair(
      otherTokenContractAddr?: string | null,
      liquidityProviderAddr?: string | null,
      czpAmtWithdrawn?: null,
      otherTokenAmtWithdrawn?: null,
      liquidityTokensSubmitted?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        otherTokenContractAddr: string;
        liquidityProviderAddr: string;
        czpAmtWithdrawn: BigNumber;
        otherTokenAmtWithdrawn: BigNumber;
        liquidityTokensSubmitted: BigNumber;
      }
    >;
  };

  estimateGas: {
    addLiquidityToCzpAndEthPair(
      _czpAmtToDeposit: BigNumberish,
      _czpMinAmtToDeposit: BigNumberish,
      _ethMinAmtToDeposit: BigNumberish,
      _deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidityToCzpAndOtherTokenPair(
      _otherTokenContractAddr: string,
      _czpAmtToDeposit: BigNumberish,
      _otherTokenAmtToDeposit: BigNumberish,
      _czpMinAmtToDeposit: BigNumberish,
      _otherTokenMinAmtToDeposit: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvedPriceFeedSigner(overrides?: CallOverrides): Promise<BigNumber>;

    buyWithCryptoToken(
      _recipientAccountId: string,
      _otherTokenContractAddr: string,
      _otherTokenMaxAmtToPayWith: BigNumberish,
      _fiatAmtToPay: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyWithEth(
      _recipientAccountId: string,
      _fiatAmtToPay: BigNumberish,
      _deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPairWithCzpAndEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPairWithCzpAndOtherToken(
      _otherTokenContractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    czpContract(overrides?: CallOverrides): Promise<BigNumber>;

    factoryContract(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPairsWithCzpAndOtherToken(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCzpAndOtherTokenPairAddr(
      _otherTokenContractAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxBlockTimestampDelay(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxDataTimestampDelay(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOfTokenInCzpWithTokenAddress(
      _tokenContractAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceOfTokenInCzpWithTokenSymbol(
      _tokenSymbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(
      _ownerToVerify: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSignerAuthorized(
      _receivedSigner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTimestampValid(
      _receivedTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paymentTransferFeesPerc(overrides?: CallOverrides): Promise<BigNumber>;

    removeOwner(
      _ownerToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    routerContract(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovedPriceFeedSigner(
      _newApprovedPriceFeedSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaymentTransferFeesPerc(
      _newPaymentTransferFeesPerc: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPurchaseConfirmation(
      _cazzPayTransactionIdToConfirm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    storeSellerInfo(
      _sellerId: string,
      _email: string,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapCzpForOtherTokens(
      _otherTokenContractAddr: string,
      _czpAmt: BigNumberish,
      _otherTokenMinAmt: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapOtherTokensForCzp(
      _otherTokenContractAddr: string,
      _otherTokenAmt: BigNumberish,
      _czpMinAmt: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wethContract(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _withdrawToAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLiquidityForCzpAndEth(
      _liquidityToWithdraw: BigNumberish,
      _minCzpToReceive: BigNumberish,
      _minEthToReceive: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLiquidityForCzpAndOtherToken(
      _otherTokenContractAddr: string,
      _liquidityToWithdraw: BigNumberish,
      _minCzpToReceive: BigNumberish,
      _minOtherTokenToReceive: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidityToCzpAndEthPair(
      _czpAmtToDeposit: BigNumberish,
      _czpMinAmtToDeposit: BigNumberish,
      _ethMinAmtToDeposit: BigNumberish,
      _deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityToCzpAndOtherTokenPair(
      _otherTokenContractAddr: string,
      _czpAmtToDeposit: BigNumberish,
      _otherTokenAmtToDeposit: BigNumberish,
      _czpMinAmtToDeposit: BigNumberish,
      _otherTokenMinAmtToDeposit: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvedPriceFeedSigner(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyWithCryptoToken(
      _recipientAccountId: string,
      _otherTokenContractAddr: string,
      _otherTokenMaxAmtToPayWith: BigNumberish,
      _fiatAmtToPay: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyWithEth(
      _recipientAccountId: string,
      _fiatAmtToPay: BigNumberish,
      _deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPairWithCzpAndEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPairWithCzpAndOtherToken(
      _otherTokenContractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    czpContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factoryContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllPairsWithCzpAndOtherToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCzpAndOtherTokenPairAddr(
      _otherTokenContractAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxBlockTimestampDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxDataTimestampDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceOfTokenInCzpWithTokenAddress(
      _tokenContractAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceOfTokenInCzpWithTokenSymbol(
      _tokenSymbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      _ownerToVerify: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSignerAuthorized(
      _receivedSigner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTimestampValid(
      _receivedTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paymentTransferFeesPerc(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeOwner(
      _ownerToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    routerContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApprovedPriceFeedSigner(
      _newApprovedPriceFeedSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentTransferFeesPerc(
      _newPaymentTransferFeesPerc: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPurchaseConfirmation(
      _cazzPayTransactionIdToConfirm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    storeSellerInfo(
      _sellerId: string,
      _email: string,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapCzpForOtherTokens(
      _otherTokenContractAddr: string,
      _czpAmt: BigNumberish,
      _otherTokenMinAmt: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapOtherTokensForCzp(
      _otherTokenContractAddr: string,
      _otherTokenAmt: BigNumberish,
      _czpMinAmt: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wethContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _withdrawToAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLiquidityForCzpAndEth(
      _liquidityToWithdraw: BigNumberish,
      _minCzpToReceive: BigNumberish,
      _minEthToReceive: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLiquidityForCzpAndOtherToken(
      _otherTokenContractAddr: string,
      _liquidityToWithdraw: BigNumberish,
      _minCzpToReceive: BigNumberish,
      _minOtherTokenToReceive: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
